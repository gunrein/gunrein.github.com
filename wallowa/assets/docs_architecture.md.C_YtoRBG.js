import{_ as a,c as e,o as s,a4 as i}from"./chunks/framework.CqZjjoIK.js";const t="/wallowa/assets/wallowa-architecture-diagram.BK4yAAOb.svg",n="/wallowa/assets/wallowa-er-diagram.WvZRE53V.svg",b=JSON.parse('{"title":"Architecture","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/architecture.md","filePath":"docs/architecture.md"}'),r={name:"docs/architecture.md"},l=i('<h1 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h1><p><code>wallowa</code> wraps <a href="https://duckdb.org/" target="_blank" rel="noreferrer">DuckDB</a> with a CLI, web UI, and fetcher to make it quick and easy to gain insight into your SDLC. As much data handling as possible is delegated to DuckDB. The tool is written primarily in <a href="https://www.rust-lang.org/" target="_blank" rel="noreferrer">Rust</a> and deploys as a single statically linked binary. Check out the <a href="./index.html#thank-you">many thanks to the projects that this project depends on</a>.</p><p>There are several components.</p><p><img src="'+t+`" alt="Architecture diagram"></p><details class="details custom-block"><summary>View the <a href="https://mermaid.js.org/" target="_blank" rel="noreferrer">MermaidJS</a> source code for the diagram.</summary><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph wallowa binary</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      subgraph cli</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      subgraph new</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      subgraph db</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DuckDB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      subgraph fetch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      subgraph web</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      subgraph sources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        GitHub[GitHub REST API]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sources--&gt;db</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cli --&gt; fetch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cli --&gt; web</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cli --&gt; new</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fetch --&gt; sources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    web --&gt; sources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sources --&gt; db</span></span></code></pre></div></details><h3 id="db" tabindex="-1">db <a class="header-anchor" href="#db" aria-label="Permalink to &quot;db&quot;">​</a></h3><p>The core of the tool is DuckDB. Database utilities and migration/DDL statements can be found in <a href="https://github.com/gunrein/wallowa/blob/main/src/db.rs" target="_blank" rel="noreferrer">src/db.rs</a>.</p><h4 id="queries" tabindex="-1">Queries <a class="header-anchor" href="#queries" aria-label="Permalink to &quot;Queries&quot;">​</a></h4><p>Data is queried directly from <code>wallowa_raw_data</code> using <a href="https://duckdb.org/docs/extensions/json" target="_blank" rel="noreferrer">DuckDB json extraction functions</a>. See the <a href="https://github.com/gunrein/wallowa/blob/main/src/github/queries.rs" target="_blank" rel="noreferrer">src/github/queries.rs</a> function for an example of what this looks like in practice.</p><p>There is a design tradeoff to querying the raw data directly. The queries themselves are more complicated and expensive to run compared to the data being loaded into normalized tables. However, this leaves a great deal of flexibility to adapt the queries to specific questions that require more of the API payload data. Both styles can be mixed, but for now the reduced complexity approach is being used. You can create views from the more complex queries as a middle ground, too.</p><h4 id="entity-relationship-diagram" tabindex="-1">Entity relationship diagram <a class="header-anchor" href="#entity-relationship-diagram" aria-label="Permalink to &quot;Entity relationship diagram&quot;">​</a></h4><p><img src="`+n+`" alt="Entity relationship diagram"></p><details class="details custom-block"><summary>View the <a href="https://mermaid.js.org/" target="_blank" rel="noreferrer">MermaidJS</a> source code for the diagram.</summary><p>The <a href="https://mermaid.js.org/" target="_blank" rel="noreferrer">MermaidJS</a> source for the diagram.</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">erDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WALLOWA_RAW_DATA {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        int id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        timestamp created_at</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        timestamp loaded_at</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        string data_source</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        string data_type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        json metadata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        string data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    WALLOWA_SETTING {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        string name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        string value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></details><h3 id="sources" tabindex="-1">Sources <a class="header-anchor" href="#sources" aria-label="Permalink to &quot;Sources&quot;">​</a></h3><p>Sources represent the data sources used to drive insights through queries and charts.</p><p>Sources are responsible for providing the fetch, query, and web UI for the data provided by the source.</p><h3 id="fetch" tabindex="-1">Fetch <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;Fetch&quot;">​</a></h3><p>Data is fetched from data sources and loaded into DuckDB. Each data source is responsible for providing fetch functionality (see <a href="https://github.com/gunrein/wallowa/blob/main/src/github/fetch.rs" target="_blank" rel="noreferrer">src/github/fetch.rs</a> for an example).</p><p>The raw data fetched from a source and the raw JSON payload is saved to the <code>wallowa_raw_data</code> table.</p><p>The server can be <a href="./configuration.html#fetch-enabled">configured to run the fetcher in the background on a time interval</a>.</p><h3 id="web-ui-and-server" tabindex="-1">Web UI and server <a class="header-anchor" href="#web-ui-and-server" aria-label="Permalink to &quot;Web UI and server&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The server should not be exposed directly to the Internet since it has not been hardened for that environment. Run a proxy in front of the server if you choose to expose it to the Internet.</p></div><p>Server-side templates are rendered for the web UI. Typescript/Javascript are used to render charts and for some user interactions.</p><p>The core web functionality and types are found in <a href="https://github.com/gunrein/wallowa/blob/main/src/web.rs" target="_blank" rel="noreferrer">src/web.rs</a>. Each source is responsible for providing it&#39;s web UI (see <a href="https://github.com/gunrein/wallowa/blob/main/src/github/web.rs" target="_blank" rel="noreferrer">src/github/web.rs</a> for an example).</p><h3 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;CLI&quot;">​</a></h3><p>The CLI provides the commands and options for the <a href="./cli.html">command line interface</a>. The code for the CLI can be found in <a href="https://github.com/gunrein/wallowa/blob/main/src/cli.rs" target="_blank" rel="noreferrer">src/cli.rs</a>. This includes the ability to generate project scaffolding.</p>`,26),h=[l];function o(p,c,d,k,E,u){return s(),e("div",null,h)}const m=a(r,[["render",o]]);export{b as __pageData,m as default};
